// Основные операции с изображениями
#include "core.hpp"
#include "imgproc.hpp"
#include "highgui.hpp"
#include "iostream"

using namespace cv; // Мы говорим интерпретатору MinGW загрузить библиотеку OpenCV
using namespace std;

int main()
{
// Открываем локальный файл
    Mat src1 = imread("matrix-sunglasses.jpg", cv :: IMREAD_COLOR); // Открываем и читаем файл с жесткого диска. Команда cv2.imread возвращает NumPy массив, который содержит представление данных из изображения
    namedWindow("Original image", cv::WindowFlags::WINDOW_AUTOSIZE);
    imshow("Original image", src1); // Отображение файла встроенными средствами OpenCV

 /*
 Тут стоит остановиться подробнее: метод для отображения cv2.imshow() принимает в себя два аргумента,
 первый это название окна, в котором будет отрисовано изображение,
 второй –  имя переменной, которая хранит данное изображение.
 Однако выполнение только данной команды отрисует изображение и сразу же закроет программу.
 Для того, чтобы мы смогли увидеть и работать с изображением, добавим команду cv2.waitKey(0).
 Данная команда останавливает выполнение скрипта до нажатия клавиши на клавиатуре.
 Параметр 0 означает что нажатие любой клавиши будет засчитано.
 */

 // Уведичение яркости изображения в 2 раза
    Mat src2;
    src1.copyTo( src2 );
    src2 = src2 * 2;
    //imshow("src2", src2);
    imwrite( "src1_res2.jpg", src2 );

    /*
    Для того, чтобы матрицу скопировать нужно вызвать метод copyTo (следующий листинг).
    Над матрицами можно осуществлять действия без вызова функций, а именно:
    проводить математические операции матрицы с числом и матрицы с матрицей.
    */

    //Объединение изображений
    Mat src3 = src1 + src2; // Сложение матриц
    imwrite( "src1_res3.jpg", src3 );

// Выделение фрагмента изображения


//В следующем листинге приведен пример копирования региона в отдельное изображение
//и работы с регионом внутри изображения
//Задается регион с помощью класса Rect, основное назначение которого
// – это поддержка данных о размерах региона: x, y, width, height.

    Rect r( 800, 300, 300, 150 ); // Создание региона

    Mat src4;
    // Копирование региона в отдельное изображение
    src1( r ).copyTo( src4 );
    src4 += CV_RGB(0,0,255); // Добавляем синего к изображению

    // Изменение части изображения
    src1( r ) *= 0.5; // Понижение яркости

    imwrite( "src1_res4.jpg", src4 );
    imwrite( "src_1.jpg", src1 );


 // Изменяем размер изображения

/*
Mat gray, edge, draw;
 cvtColor(src1, gray, cv :: COLOR_BGR2GRAY);

Canny(gray, edge, 50, 150, 3);

edge.convertTo(draw, CV_8U);
 namedWindow("image", cv::WindowFlags::WINDOW_AUTOSIZE);
 imshow("image", draw);

 */

waitKey(0);
 return 0;
}

